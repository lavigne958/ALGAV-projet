#include <string.h>

#include "struct.h"
#include "access.h"

//recursive function that finds and delete a string in the dictionary
int aux_suppression(node* nd, char* mot){
  //terminal case: if we found the string
  if( prefix_equals_string(nd, mot) ){
    //if the string has epsilon, it has no child we just return 1 to delete the node
    if( prefix_has_epsilon(nd)){
      return 1;
      //if the node has epsilon in its child
    }else if( node_has_epsilon(nd)){
      int nb_fils = get_fils_node(nd);

      //if it has more than on child we just delete the epsilon child entry
      if(nb_fils > 1){
	free(nd->fils[EPSILON]);
	nd->fils[EPSILON] = NULL;
	//if it has only one child we append the childj
      }else if( nb_fils == 1){
	int i = 0;
	int pos = -1;
	while(i < NB_CHAR_MAX || pos == -1){
	  if(nd->fils[i] != NULL){
	    post = i;
	  }
	  i++;
	}

	sprintf(nd->fils[pos]->prefix, "%s%s",get_prefix(nd), get_prefix(nd->fils[pos]));
	node* del_node = nd;
	nd = 

	
	
      }
    }
  }
}

int suppression(node* nd, char* mot){
  if(is_node_null(nd)){
    exit_failure("suppression", "noeud nd est null");
  }

  
  
  return aux_suppression(nd, mot);
}
